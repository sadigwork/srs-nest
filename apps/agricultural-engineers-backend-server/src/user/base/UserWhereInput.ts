/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ApplicationListRelationFilter } from "../../application/base/ApplicationListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { DocumentListRelationFilter } from "../../document/base/DocumentListRelationFilter";
import { EducationListRelationFilter } from "../../education/base/EducationListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { InstitutionListRelationFilter } from "../../institution/base/InstitutionListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EnumUserRole } from "./EnumUserRole";
import { TrainingListRelationFilter } from "../../training/base/TrainingListRelationFilter";
import { WorkExperienceListRelationFilter } from "../../workExperience/base/WorkExperienceListRelationFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: () => ApplicationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ApplicationListRelationFilter)
  @IsOptional()
  @Field(() => ApplicationListRelationFilter, {
    nullable: true,
  })
  applications?: ApplicationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DocumentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DocumentListRelationFilter)
  @IsOptional()
  @Field(() => DocumentListRelationFilter, {
    nullable: true,
  })
  documents?: DocumentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EducationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EducationListRelationFilter)
  @IsOptional()
  @Field(() => EducationListRelationFilter, {
    nullable: true,
  })
  educations?: EducationListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  emailVerified?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => InstitutionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InstitutionListRelationFilter)
  @IsOptional()
  @Field(() => InstitutionListRelationFilter, {
    nullable: true,
  })
  institutions?: InstitutionListRelationFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isActive?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  lastLoginAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phone?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "Option1";

  @ApiProperty({
    required: false,
    type: () => TrainingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TrainingListRelationFilter)
  @IsOptional()
  @Field(() => TrainingListRelationFilter, {
    nullable: true,
  })
  trainings?: TrainingListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => WorkExperienceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => WorkExperienceListRelationFilter)
  @IsOptional()
  @Field(() => WorkExperienceListRelationFilter, {
    nullable: true,
  })
  workExperiences?: WorkExperienceListRelationFilter;
}

export { UserWhereInput as UserWhereInput };
