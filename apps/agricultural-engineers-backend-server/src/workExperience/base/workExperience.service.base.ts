/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkExperience as PrismaWorkExperience,
  Application as PrismaApplication,
  User as PrismaUser,
} from "@prisma/client";

export class WorkExperienceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkExperienceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workExperience.count(args);
  }

  async workExperiences(
    args: Prisma.WorkExperienceFindManyArgs
  ): Promise<PrismaWorkExperience[]> {
    return this.prisma.workExperience.findMany(args);
  }
  async workExperience(
    args: Prisma.WorkExperienceFindUniqueArgs
  ): Promise<PrismaWorkExperience | null> {
    return this.prisma.workExperience.findUnique(args);
  }
  async createWorkExperience(
    args: Prisma.WorkExperienceCreateArgs
  ): Promise<PrismaWorkExperience> {
    return this.prisma.workExperience.create(args);
  }
  async updateWorkExperience(
    args: Prisma.WorkExperienceUpdateArgs
  ): Promise<PrismaWorkExperience> {
    return this.prisma.workExperience.update(args);
  }
  async deleteWorkExperience(
    args: Prisma.WorkExperienceDeleteArgs
  ): Promise<PrismaWorkExperience> {
    return this.prisma.workExperience.delete(args);
  }

  async getApplication(parentId: string): Promise<PrismaApplication | null> {
    return this.prisma.workExperience
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.workExperience
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
