/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Institution as PrismaInstitution,
  Application as PrismaApplication,
  User as PrismaUser,
} from "@prisma/client";

export class InstitutionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstitutionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.institution.count(args);
  }

  async institutions(
    args: Prisma.InstitutionFindManyArgs
  ): Promise<PrismaInstitution[]> {
    return this.prisma.institution.findMany(args);
  }
  async institution(
    args: Prisma.InstitutionFindUniqueArgs
  ): Promise<PrismaInstitution | null> {
    return this.prisma.institution.findUnique(args);
  }
  async createInstitution(
    args: Prisma.InstitutionCreateArgs
  ): Promise<PrismaInstitution> {
    return this.prisma.institution.create(args);
  }
  async updateInstitution(
    args: Prisma.InstitutionUpdateArgs
  ): Promise<PrismaInstitution> {
    return this.prisma.institution.update(args);
  }
  async deleteInstitution(
    args: Prisma.InstitutionDeleteArgs
  ): Promise<PrismaInstitution> {
    return this.prisma.institution.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.institution
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.institution
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
