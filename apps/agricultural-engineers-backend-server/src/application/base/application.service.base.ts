/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Application as PrismaApplication,
  Document as PrismaDocument,
  Education as PrismaEducation,
  Training as PrismaTraining,
  WorkExperience as PrismaWorkExperience,
  Institution as PrismaInstitution,
  User as PrismaUser,
} from "@prisma/client";

export class ApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.application.count(args);
  }

  async applications(
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.application.findMany(args);
  }
  async application(
    args: Prisma.ApplicationFindUniqueArgs
  ): Promise<PrismaApplication | null> {
    return this.prisma.application.findUnique(args);
  }
  async createApplication(
    args: Prisma.ApplicationCreateArgs
  ): Promise<PrismaApplication> {
    return this.prisma.application.create(args);
  }
  async updateApplication(
    args: Prisma.ApplicationUpdateArgs
  ): Promise<PrismaApplication> {
    return this.prisma.application.update(args);
  }
  async deleteApplication(
    args: Prisma.ApplicationDeleteArgs
  ): Promise<PrismaApplication> {
    return this.prisma.application.delete(args);
  }

  async findDocuments(
    parentId: string,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.application
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }

  async findEducations(
    parentId: string,
    args: Prisma.EducationFindManyArgs
  ): Promise<PrismaEducation[]> {
    return this.prisma.application
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .educations(args);
  }

  async findTrainings(
    parentId: string,
    args: Prisma.TrainingFindManyArgs
  ): Promise<PrismaTraining[]> {
    return this.prisma.application
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .trainings(args);
  }

  async findWorkExperiences(
    parentId: string,
    args: Prisma.WorkExperienceFindManyArgs
  ): Promise<PrismaWorkExperience[]> {
    return this.prisma.application
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workExperiences(args);
  }

  async getInstitution(parentId: string): Promise<PrismaInstitution | null> {
    return this.prisma.application
      .findUnique({
        where: { id: parentId },
      })
      .institution();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.application
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
