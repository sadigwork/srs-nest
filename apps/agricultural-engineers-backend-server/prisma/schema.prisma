datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Application {
  applicationNumber String?
  comments          String?
  createdAt         DateTime               @default(now())
  documents         Document[]
  educations        Education[]
  id                String                 @id @default(cuid())
  institution       Institution?           @relation(fields: [institutionId], references: [id])
  institutionId     String?
  status            EnumApplicationStatus?
  submissionDate    DateTime?
  trainings         Training[]
  updatedAt         DateTime               @updatedAt
  user              User?                  @relation(fields: [userId], references: [id])
  userId            String?
  workExperiences   WorkExperience[]
}

model Education {
  application     Application? @relation(fields: [applicationId], references: [id])
  applicationId   String?
  createdAt       DateTime     @default(now())
  degree          String?
  fieldOfStudy    String?
  graduationYear  Int?
  id              String       @id @default(cuid())
  institutionName String?
  updatedAt       DateTime     @updatedAt
  user            User?        @relation(fields: [userId], references: [id])
  userId          String?
}

model Training {
  application       Application? @relation(fields: [applicationId], references: [id])
  applicationId     String?
  certificateNumber String?
  completionDate    DateTime?
  createdAt         DateTime     @default(now())
  id                String       @id @default(cuid())
  provider          String?
  title             String?
  updatedAt         DateTime     @updatedAt
  user              User?        @relation(fields: [userId], references: [id])
  userId            String?
}

model WorkExperience {
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  createdAt     DateTime     @default(now())
  employerName  String?
  endDate       DateTime?
  id            String       @id @default(cuid())
  position      String?
  startDate     DateTime?
  updatedAt     DateTime     @updatedAt
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
}

model Institution {
  applications       Application[]
  createdAt          DateTime                  @default(now())
  id                 String                    @id @default(cuid())
  name               String?
  registrationNumber String?
  typeField          EnumInstitutionTypeField?
  updatedAt          DateTime                  @updatedAt
  user               User?                     @relation(fields: [userId], references: [id])
  userId             String?
  verified           Boolean?
}

model Document {
  application   Application?           @relation(fields: [applicationId], references: [id])
  applicationId String?
  createdAt     DateTime               @default(now())
  fileUrl       Json?
  id            String                 @id @default(cuid())
  title         String?
  typeField     EnumDocumentTypeField?
  updatedAt     DateTime               @updatedAt
  user          User?                  @relation(fields: [userId], references: [id])
  userId        String?
  verified      Boolean?
}

model User {
  applications    Application[]
  createdAt       DateTime         @default(now())
  documents       Document[]
  educations      Education[]
  email           String?          @unique
  emailVerified   Boolean?
  firstName       String?
  id              String           @id @default(cuid())
  institutions    Institution[]
  isActive        Boolean?
  lastLoginAt     DateTime?
  lastName        String?
  password        String
  phone           String?
  role            EnumUserRole?
  roles           Json
  trainings       Training[]
  updatedAt       DateTime         @updatedAt
  username        String           @unique
  workExperiences WorkExperience[]
}

enum EnumApplicationStatus {
  Option1
}

enum EnumInstitutionTypeField {
  Option1
}

enum EnumDocumentTypeField {
  Option1
}

enum EnumUserRole {
  Option1
}
